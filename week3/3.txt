#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

typedef struct {
    int *data;
    int front;
    int rear;
    int size;
    int capacity;
} MyCircularDeque;
MyCircularDeque* myCircularDequeCreate(int k) {
    MyCircularDeque *deque = (MyCircularDeque *)malloc(sizeof(MyCircularDeque));
    deque->data = (int *)malloc(k * sizeof(int));
    deque->front = 0;
    deque->rear = -1;
    deque->size = 0;
    deque->capacity = k;
    return deque;
}
bool myCircularDequeInsertFront(MyCircularDeque* obj, int value) {
    if (obj->size == obj->capacity) return false;

    obj->front = (obj->front - 1 + obj->capacity) % obj->capacity;
    obj->data[obj->front] = value;
    obj->size++;
    return true;
}

bool myCircularDequeInsertLast(MyCircularDeque* obj, int value) {
    if (obj->size == obj->capacity) return false;

    obj->rear = (obj->rear + 1) % obj->capacity;
    obj->data[obj->rear] = value;
    obj->size++;
    return true;
}

bool myCircularDequeDeleteFront(MyCircularDeque* obj) {
    if (obj->size == 0) return false;

    obj->front = (obj->front + 1) % obj->capacity;
    obj->size--;
    return true;
}
bool myCircularDequeDeleteLast(MyCircularDeque* obj) {
    if (obj->size == 0) return false;

    obj->rear = (obj->rear - 1 + obj->capacity) % obj->capacity;
    obj->size--;
    return true;
}
int myCircularDequeGetFront(MyCircularDeque* obj) {
    if (obj->size == 0) return -1;
    return obj->data[obj->front];
}
int myCircularDequeGetRear(MyCircularDeque* obj) {
    if (obj->size == 0) return -1;
    return obj->data[obj->rear];
}
bool myCircularDequeIsEmpty(MyCircularDeque* obj) {
    return obj->size == 0;
}
bool myCircularDequeIsFull(MyCircularDeque* obj) {
    return obj->size == obj->capacity;
}
void myCircularDequeFree(MyCircularDeque* obj) {
    free(obj->data);
    free(obj);
}

int main() {
    MyCircularDeque* deque = myCircularDequeCreate(3);

    printf("Insert 1 at front: %d\n", myCircularDequeInsertFront(deque, 1)); // true
    printf("Insert 2 at front: %d\n", myCircularDequeInsertFront(deque, 2)); // true
    printf("Insert 3 at rear: %d\n", myCircularDequeInsertLast(deque, 3));  // true
    printf("Insert 4 at rear (should fail): %d\n", myCircularDequeInsertLast(deque, 4)); // false

    printf("Front item: %d\n", myCircularDequeGetFront(deque)); // 2
    printf("Rear item: %d\n", myCircularDequeGetRear(deque));  // 3

    printf("Delete front: %d\n", myCircularDequeDeleteFront(deque)); // true
    printf("Insert 4 at rear: %d\n", myCircularDequeInsertLast(deque, 4));  // true
    printf("Rear item: %d\n", myCircularDequeGetRear(deque));  // 4

    printf("Is deque full: %d\n", myCircularDequeIsFull(deque)); // true
    printf("Is deque empty: %d\n", myCircularDequeIsEmpty(deque)); // false

    myCircularDequeFree(deque);

    return 0;
}
